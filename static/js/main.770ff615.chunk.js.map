{"version":3,"sources":["components/ContactList/ContactList.module.css","components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ContactList/ContactList.js","App.js","index.js","components/ContactForm/ContactForm.module.css"],"names":["module","exports","ContactForm","inputId","uuidv4","state","name","number","handleInputChange","evt","console","log","currentTarget","value","setState","handleSubmit","preventDefault","props","addContact","className","styles","container","onSubmit","this","form","htmlFor","label","type","pattern","title","required","onChange","id","Component","Filter","оnChange","ContactList","contacts","onDeleteContact","map","contact","contactList","onClick","App","filter","changeFilter","e","getVisibleContacts","normalizedFilter","toLowerCase","includes","idContact","nameFromInput","find","alert","prevState","deleteContact","idFromContact","localStorage","getItem","parsedContacts","JSON","parse","prevProps","setItem","stringify","visibleContacts","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.770ff615.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactList\":\"ContactList_contactList__efGq2\"};","import React, { Component } from 'react'\r\nimport styles from './ContactForm.module.css';\r\n// import PropTypes from 'prop-types';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\n\r\nclass ContactForm extends Component{\r\n    inputId = uuidv4();\r\n    state = {\r\n        name: '',\r\n        number: '',\r\n    \r\n    };\r\n    handleInputChange = evt => {\r\n        console.log(evt.currentTarget.value);\r\n       const { name, value } = evt.currentTarget;\r\n       this.setState({[name]: value});\r\n\r\n    };\r\n    handleSubmit = evt => {\r\n        evt.preventDefault();\r\n        // if(this.state.name)\r\n        this.props.addContact(this.state.name, this.state.number);\r\n        this.setState({ name: \"\", number: \"\"});\r\n    };\r\n    render() {\r\n        return (\r\n         \r\n                <div className={styles.container}>\r\n                    <form onSubmit={this.handleSubmit} className={styles.form}>\r\n                        <label  htmlFor={this.inputId} className={styles.label}>\r\n                         \r\n                            Name:\r\n                           \r\n                            <input\r\n                                className=\"Container-form__input\"\r\n                                type=\"text\"\r\n                                name=\"name\"\r\n                                pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                                title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n                                required\r\n                                value={this.state.name}\r\n                                onChange={this.handleInputChange}\r\n                                id={this.inputId}\r\n                            />\r\n                        </label>\r\n                        <label className={styles.label}>\r\n                            Number:\r\n                            <input\r\n                                type=\"tel\"\r\n                                name=\"number\"\r\n                                pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n                                title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n                                value = {this.state.number}\r\n                                onChange = {this.handleInputChange}\r\n                                // id={this.inputId}\r\n                                required\r\n                            />\r\n                        </label>\r\n\r\n                        {/* <Filter value = {this.state.filter} оnChange = {this.changeFilter} /> */}\r\n                        \r\n                      <button type=\"submit\" className=\"Container-form__btn\">Add Contact</button>  \r\n                    </form>\r\n                \r\n                {/* <ContactList contacts={visibleContacts}/> */}\r\n            </div>\r\n        )\r\n    };\r\n};\r\n\r\n\r\n\r\nexport default ContactForm;","import React from 'react';\r\n// import styles from './Filter.module.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Filter = ({value, оnChange}) => (\r\n    <label>\r\n     FInd contacts by name\r\n     <input \r\n     type=\"text\" \r\n     value={value}\r\n     onChange={оnChange}\r\n     />\r\n    </label>\r\n);\r\n\r\nFilter.propTypes = {\r\n    value: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default Filter;","import React from \"react\";\r\nimport styles from './ContactList.module.css';\r\nimport PropTypes from 'prop-types';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nconst ContactList = ({ contacts, onDeleteContact }) => {\r\n    return (\r\n        <div className=\"Contact-container\">\r\n                {/* <h2 className=\"Contact-container__title\">Contacts</h2> */}\r\n                <ul >\r\n                {contacts.map(contact => (\r\n                    <li className={styles.contactList} key = {uuidv4()}>{contact.name} : {contact.number}\r\n                    <button onClick={() => onDeleteContact(contact.id)} >Delete</button>\r\n                    </li>))\r\n                   }\r\n                </ul>\r\n            </div>\r\n    )\r\n};\r\n\r\nContactList.propTypes = {\r\n    contact: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            name: PropTypes.string.isRequired,\r\n            number: PropTypes.string.isRequired,\r\n            id: PropTypes.string.isRequired,\r\n\r\n        })\r\n        ),\r\n};\r\n\r\nexport default ContactList;","import React, { Component } from \"react\";\n// import InputPhoneBook from './components/InputPhoneBook';\nimport ContactForm from './components/ContactForm';\nimport { v4 as uuidv4 } from 'uuid';\nimport Filter from './components/Filter';\nimport ContactList from './components/ContactList';\n\n\nclass App extends Component {\n  // inputId = uuidv4();\n  state = {\n    contacts: [\n      {id: 'id-1', name: 'Rosie Simpson', number: '459-12-56'},\n      {id: 'id-2', name: 'Hermione Kline', number: '443-89-12'},\n      {id: 'id-3', name: 'Eden Clements', number: '645-17-79'},\n      {id: 'id-4', name: 'Annie Copeland', number: '227-91-26'},\n    ],\n    filter: '',\n  }\n\n  componentDidMount () {\n    // console.log('пришел ДИДМАУНТ');\n    const contacts = localStorage.getItem('myLocalStorageContacts');\n    const parsedContacts = JSON.parse(contacts);\n    if(parsedContacts) {\n      this.setState({contacts: parsedContacts})\n    }\n    console.log(parsedContacts);\n  }\n  componentDidUpdate (prevProps, prevState) {\n    if(this.state.contacts !== prevState.contacts) {\n      localStorage.setItem('myLocalStorageContacts', JSON.stringify(this.state.contacts))\n    }\n  }\n\n  changeFilter = e => this.setState({filter: e.currentTarget.value});\n\n  getVisibleContacts = () => {\n      const normalizedFilter = this.state.filter.toLowerCase();\n      return this.state.contacts.filter(contact => contact.name.toLowerCase().includes(normalizedFilter),\n      );\n  };\n\n  addContact = (name, number) => {\n    const idContact = uuidv4();\n      const nameFromInput = {name: name, number: number, id: idContact};\n      const findContact = this.state.contacts.find(contact => contact.name === name && contact.number === number);\n     \n  \n       if(findContact) {\n        alert(`${name} is already in contacts!`);\n        return;\n      }\n \n          this.setState(prevState => ({ contacts: [nameFromInput, ...prevState.contacts],\n    }));\n  };\n\n    deleteContact = (idFromContact) => {\n      this.setState(prevState => ({\n        contacts: prevState.contacts.filter (contact => \n        contact.id !== idFromContact),\n}))\n    }\n\n  render() {\n    const visibleContacts = this.getVisibleContacts();\n      return (\n          <div>\n      <h1>Phonebook</h1>\n      <ContactForm addContact = {this.addContact} />\n\n      <h2>Contacts</h2>\n      <Filter value = {this.state.filter} оnChange = {this.changeFilter} />\n      <ContactList contacts={visibleContacts} onDeleteContact={this.deleteContact}/>\n    </div> \n    )\n  }\n\n}\n\nexport default App;\n\n\n\n\n    // var contactAlreadyAdded = false;\n      // for(var i = 0; i < this.state.contacts.length; i++) {\n      //   var contact = this.state.contacts[i];\n      //   if (contact.name === name && contact.number === number) {\n      //     contactAlreadyAdded = true;\n      //     break;\n      //   }\n      // }\n      // if(contactAlreadyAdded) {\n      //   alert(`${name} is already in contacts!`);\n      //   return;\n      // }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'modern-normalize/modern-normalize.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ContactForm_container__10erW\",\"label\":\"ContactForm_label__Bjybb\"};"],"sourceRoot":""}